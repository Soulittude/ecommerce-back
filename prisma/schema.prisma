// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Define your PostgreSQL datasource and generator for Prisma Client

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// === Models ===
model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String
  name         String?
  role         Role     @default(CUSTOMER)
  orders       Order[]
  reviews      Review[]
  createdAt    DateTime @default(now())
  updatedAd    DateTime @updatedAt
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]
}

model Product {
  id          Int         @id @default(autoincrement())
  name        String
  slug        String      @unique
  description String?
  price       Float
  specs       Json // store arbitrary specs (e.g. battery, color) as JSON
  images      String[] // list of image URLs
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  Int
  reviews     Review[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]
}

model Review {
  id        Int      @id @default(autoincrement())
  rating    Int
  comment   String?
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  createdAt DateTime @default(now())
}

model Order {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int
  items       OrderItem[]
  totalAmount Float
  status      OrderStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
  unitPrice Float // price at time of order
}

// --- Enums ---
enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
